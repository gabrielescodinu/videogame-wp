const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{data:function(){return{loading:!1,globalSettings:{},search:"",ui:{strings:{siteSettings:__("Site settings","uipress-lite"),saveSettings:__("Save settings","uipress-lite"),settingsSaved:__("Settings saved","uipress-lite"),proOption:__("This is a pro option. Upgrade to unlock","uipress-lite"),searchSettings:__("Search settings","uipress-lite")}}}},inject:["uipData","router","uipress"],mounted:function(){this.loading=!1,this.getSettings()},watch:{"uiTemplate.globalSettings":{handler(e,i){},deep:!0},"uiTemplate.globalSettings":{handler(e,i){},deep:!0}},computed:{returnGlobalSettings(){return this.globalSettings}},methods:{getSettings(){let e=this;e.loading=!0;let i=new FormData;i.append("action","uip_get_global_settings"),i.append("security",uip_ajax.security),e.uipress.callServer(uip_ajax.ajax_url,i).then(i=>{e.loading=!1,i.error?e.uipress.notify(i.message,"","error",!0):(this.getUserStyles(),i.options&&e.uipress.isObject(i.options)&&Object.keys(i.options).length>0&&(e.globalSettings=i.options))})},getUserStyles(){let e=this,i=new FormData;i.append("action","uip_get_ui_styles"),i.append("security",uip_ajax.security),e.uipress.callServer(uip_ajax.ajax_url,i).then(i=>{i.error||i.styles&&e.injectSavedStyles(i.styles)})},injectSavedStyles(e){let i=this.uipData.themeStyles;for(let t in i){let n=i[t];e[n.name]&&("value"in e[n.name]&&(n.value=e[n.name].value),"darkValue"in e[n.name]&&(n.darkValue=e[n.name].darkValue))}for(let i in e){let t=e[i];t.user&&(this.uipData.themeStyles[t.name]=t)}},returnTemplateOption(e,i){let t=i.uniqueKey,n=this.globalSettings;return e in n||(n[e]={}),t in n[e]||(i.accepts===String&&(n[e][t]=""),i.accepts===Array&&(n[e][t]=[]),i.accepts===Object&&(n[e][t]={}),i.accepts===Boolean&&(n[e][t]=!1)),n[e][t]},saveTemplateOption(e,i,t){this.globalSettings[e][i]=t},saveSettings(){let e=this,i=e.uipress.uipEncodeJson(e.globalSettings),t=this.formatStyles(),n=JSON.stringify(t,(e,i)=>"true"===i?"uiptrue":!0===i?"uiptrue":"false"===i?"uipfalse":!1===i?"uipfalse":""===i?"uipblank":i),a=new FormData;a.append("action","uip_save_global_settings"),a.append("security",uip_ajax.security),a.append("settings",i),a.append("styles",n),e.uipress.callServer(uip_ajax.ajax_url,a).then(i=>{i.error?e.uipress.notify(i.message,"","error",!0):e.uipress.notify(e.ui.strings.settingsSaved,"","success",!0)})},formatStyles(){let e=this.uipData.themeStyles,i={};for(let t in e)e[t].value&&(i[e[t].name]||(i[e[t].name]={}),i[e[t].name].value=e[t].value),e[t].darkValue&&(i[e[t].name]||(i[e[t].name]={}),i[e[t].name].darkValue=e[t].darkValue),e[t].user&&(i[e[t].name].user=e[t].user,i[e[t].name].label=e[t].label,i[e[t].name].name=e[t].name,i[e[t].name].type=e[t].type);return i},conditionalShowGroup(e){return!("condition"in e)||e.condition(this.globalSettings)},inSearch(e){let i=this.search.toLowerCase(),t=e.label.toLowerCase(),n=e.help.toLowerCase();return!(!t.includes(i)&&!n.includes(i))}},template:'\n    \n      <uip-floating-panel closeRoute="/">\n      \n      \n        \x3c!-- Site settings --\x3e\n        <div class="uip-flex uip-w-100p uip-h-100p">\n          <div class="uip-flex uip-flex-column uip-w-100p uip-max-h-100p uip-flex-no-wrap">\n          \n            <div class="uip-text-l uip-text-emphasis uip-padding-m uip-border-bottom">{{ui.strings.siteSettings}}</div>\n            \n            <div v-if="loading" class="uip-w-100p uip-flex uip-flex-middle uip-flex-center uip-padding-m"><loading-chart></loading-chart></div>\n            \n            <div v-if="!loading" class="uip-flex-grow uip-overflow-auto uip-flex uip-flex-column uip-row-gap-s uip-padding-m">\n            \n            \n              <div class="uip-padding-xxs uip-border-round uip-flex uip-flex-center uip-gap-xxs">\n                <div class="uip-icon uip-icon-l uip-text-muted">search</div>\n                <input class="uip-blank-input uip-flex-grow" type="text" v-model="search" :placeholder="ui.strings.searchSettings">\n              </div>\n              \n              \n              \n              \x3c!--Searching Dynamic settings --\x3e\n              <div  v-if="search != \'\'" class="uip-padding-xs uip-flex uip-flex-column uip-row-gap-m">\n                <template v-for="group in uipData.globalGroupOptions">\n                    \n                      \x3c!--Loop through group settings --\x3e\n                      \n                      <template v-for="option in group.settings">\n                        <div v-if="conditionalShowGroup(option) && inSearch(option)" class="uip-flex uip-flex-column uip-row-gap-xs uip-flex-start">\n                        \n                          \n                          <div class="uip-flex uip-gap-xxxs uip-flex-center">\n                            <div class="uip-text-bold uip-text-muted">{{group.label}}</div>\n                            <div class="uip-icon uip-text-muted">chevron_right</div>\n                            <div class="uip-text-bold">{{option.label}}</div>\n                          </div>\n                          <div v-if="option.help" class="uip-text-s uip-text-muted">{{option.help}}</div>\n                          \n                          <a href="https://uipress.co?utm_source=uipressupgrade&utm_medium=referral" target="_BLANK" v-if="option.proOption" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s uip-link-default uip-no-underline">\n                            {{ui.strings.proOption}}\n                          </a>\n                          \n                          <component v-else :is="option.component" :value="returnTemplateOption(group.name, option)" :args="option.args"\n                          :returnData="function(data){saveTemplateOption(group.name, option.uniqueKey, data)}"></component>\n                        \n                        </div>\n                        \n                      </template>\n                    \n                </template>\n              </div>\n              \n              \n              \x3c!-- Dynamic settings --\x3e\n              <template v-else v-for="group in uipData.globalGroupOptions">\n                <accordion :openOnTick="false" v-if="conditionalShowGroup(group)">\n                  <template v-slot:title>\n                    <div class="uip-flex-grow uip-flex uip-gap-xxs uip-flex-center uip-text-bold">\n                      <div class="uip-icon">{{group.icon}}</div>\n                      <div class="">{{group.label}}</div>\n                    </div>\n                  </template>\n                  <template v-slot:content>\n                    <div class="uip-padding-xs uip-flex uip-flex-column uip-row-gap-m">\n                      \x3c!--Loop through group settings --\x3e\n                      \n                      <template v-for="option in group.settings">\n                        <div v-if="conditionalShowGroup(option)"  class="uip-flex uip-flex-column uip-row-gap-xs uip-flex-start">\n                        \n                          <div class="uip-text-bold">{{option.label}}</div>\n                          <div v-if="option.help" class="uip-text-s uip-text-muted">{{option.help}}</div>\n                          \n                          <a href="https://uipress.co?utm_source=uipressupgrade&utm_medium=referral" target="_BLANK" v-if="option.proOption" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s uip-link-default uip-no-underline">\n                            {{ui.strings.proOption}}\n                          </a>\n                          \n                          <component v-else :is="option.component" :value="returnTemplateOption(group.name, option)" :args="option.args"\n                          :returnData="function(data){saveTemplateOption(group.name, option.uniqueKey, data)}"></component>\n                        \n                        </div>\n                        \n                      </template>\n                      \n                      <template v-if="group.name == \'theme\'">\n                        <list-variables></list-variables>\n                      </template>\n                      \x3c!--End loop through group settings --\x3e\n                    </div>\n                  </template>\n                </accordion>\n              </template>\n              \x3c!-- End dynamic settings --\x3e\n            </div>\n            \n            <div v-if="!loading" class="uip-flex uip-flex-right uip-padding-m">\n            \n              <button class="uip-button-primary" @click="saveSettings()">{{ui.strings.saveSettings}}</button>\n              \n            </div>\n            \n            \n          </div>\n        </div>\n        \n        \x3c!-- site settings --\x3e\n      \n      </uip-floating-panel>\n      '}};