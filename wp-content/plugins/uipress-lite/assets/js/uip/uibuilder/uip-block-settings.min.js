const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{inject:["uipData","router","uipress","uiTemplate"],data:function(){return{block:{},uid:this.$route.params.uid,mode:"light",section:"settings",missing:!0,groups:[],loading:!0,options:{},activeTab:!1,buildingSettings:!1,componenetSettings:{},strings:{missingMessage:__("This block no longer exists","uipress-lite"),goBack:__("Go back","uipress-lite"),blockID:__("Block ID","uipress-lite"),proOption:__("This is a pro option. Upgrade to unlock","uipress-lite"),theme:__("Theme","uipress-lite"),options:__("Options","uipress-lite"),buildingSettings:__("Building settings object...","uipress-lite"),blockUniqueID:__("Block unique id. If you change this it must remain unique and can not be blank","uipress-lite"),hiddenOnDevice:__("Hidden on device","uipress-lite"),tooltip:__("Tooltip","uipress-lite"),tooltipMessage:__("Message","uipress-lite"),delay:__("Delay before show","uipress-lite"),styles:__("Styles","uipress-lite"),blockSettings:__("Block options","uipress-lite"),currentlyEditing:__("Currently editing","uipress-lite")},switchOptions:{light:{value:"light",label:__("Light mode","uipress-lite")},dark:{value:"dark",label:__("Dark mode","uipress-lite")}},optionsSections:{settings:{value:"settings",label:__("Settings","uipress-lite"),icon:"tune"},wrap:{value:"container",label:__("Wrap","uipress-lite"),icon:"crop_free"},style:{value:"style",label:__("Style","uipress-lite"),icon:"palette"},advanced:{value:"advanced",label:__("Advanced","uipress-lite"),icon:"code"}}}},watch:{componenetSettings:{handler(i,t){this.passSettingsToBlock()},deep:!0},"block.uid":{handler(i,t){""==i&&(this.block.uid=this.uipress.createUID())},deep:!0},"$route.query.section":{handler(i,t){this.setTab(),this.setSection()},deep:!0}},mounted:function(){this.findBlockByUid(),this.setTab(),this.setSection();let i=this.uid;this.uipress.openTreeViewlayers(this.uiTemplate.content,i)},computed:{returnBlock(){return this.block},returnSettings(){return this.componenetSettings},ifBlockExists(){return!JSON.stringify(this.uiTemplate.content).includes(this.uid)},returnBlock(){return this.block}},methods:{passSettingsToBlock(){let i=this;if(!i.uipress.isObject(i.componenetSettings))return;let t=JSON.parse(JSON.stringify(i.componenetSettings));const e={};for(let n in t){let s=t[n];if(e[n]={},e[n].options={},"styleType"in s&&(e[n].styleType=s.styleType),"class"in s&&(e[n].class=s.class),"options"in s)for(let t in s.options)if("value"in s.options[t]||"darkValue"in s.options[t]){let o,p,a,l;"value"in s.options[t]&&(o=s.options[t].value),"darkValue"in s.options[t]&&(p=s.options[t].darkValue),void 0!==o&&(a=i.uipress.isObject(o)?this.clear_empty_values_from_object(o):o),void 0!==p&&(l=i.uipress.isObject(o)?this.clear_empty_values_from_object(p):p),void 0===a&&void 0===l||(e[n].options[t]={},e[n].options[t].settingName=s.options[t].settingName,void 0!==a&&(e[n].options[t].value=a),void 0!==l&&(e[n].options[t].darkValue=l))}}i.uipress.isObject(e)&&(i.block.settings=e)},clear_empty_values_from_object(i){let t=this;for(let e in i){let n=i[e];void 0===n&&delete i[e],""==n&&!1!==n&&0!==n&&"0"!==n&&delete i[e],t.uipress.isObject(n)&&(0===Object.keys(n).length?delete i[e]:(n=t.clear_empty_values_from_object(n),0===Object.keys(i[e]).length&&delete i[e]))}return i},setActiveTabs(){let i=this,t=this.uid,e=this.uiTemplate.content.map(async e=>{let n=await i.checkIfLayerOpen(e,t);if(Array.isArray(n)){if(JSON.stringify(n).includes("true"))return e.tabOpen=!0,!0}else if(n)return e.tabOpen=!0,!0;return n});return Promise.all(e).then(i=>i)},checkIfLayerOpen(i,t){let e=this;if(i.uid==t)return i.tabOpen=!0,!0;if(i.content){let n=i.content.map(async i=>await e.checkIfLayerOpen(i,t));return Promise.all(n).then(t=>(t.includes(!0)&&(i.tabOpen=!0),t))}return!1},setTab(){let i=this.$route.query;i&&i.gn&&(this.activeTab=i.gn)},setSection(){let i=this.$route.query;i&&i.section&&(this.section=i.section)},async build_block_settings(i){let t=this,e=i.moduleName,n=this.uipData.blocks,s=i.settings,o=n.filter(i=>i.moduleName===e);if(o.length<1)return t.missing=!0,t.loading=!1,t.buildingSettings=!1,t.strings.missingMessage=__("This block has no settings","uipress-lite"),!1;let p=JSON.parse(JSON.stringify(o[0].optionsEnabled));for(var a=0;a<p.length;a++){let e=p[a],n=e.name,o={};n in s&&(o=s[n]),0===Object.keys(o).length&&(t.uipress.format_block_presets(e.options,i.settings,e),n in i.settings&&(o=i.settings[n])),t.uipress.format_block_option(e,o,t.componenetSettings)}return!0},findBlockByUid(){let i=this;i.loading=!0,i.missing=!1,i.block=[],i.uipress.searchForBlock(i.uiTemplate.content,i.uid).then(t=>{t?(i.block=t,i.buildingSettings=!0,"tooltip"in i.block||(i.block.tooltip={}),i.build_block_settings(i.block).then(t=>{t&&(i.highLightBlock(i.uid),i.missing=!1,i.buildingSettings=!1,i.loading=!1)})):(i.missing=!0,i.loading=!1)})},highLightBlock(i){},removeSelectedClasses(){},showTitle(i){return"dark"!=this.mode||1==i.dark},componentExists(i){return!!this.$root._.appContext.components[i]},goBack(){let i=this.$route.params.templateID;this.removeSelectedClasses(),this.router.push({path:"/uibuilder/"+i+"/",query:{...this.$route.query}})},checkIfEmpty(i){let t=i.options;if("dark"!=this.mode)return!0;for(const[i,e]of Object.entries(t))if("dark"in t[i]&&t[i].dark)return!0;return!1},pushActiveTab(i){this.$router.push({query:{...this.$route.query,gn:i}})},pushActiveSection(i){this.$router.push({query:{...this.$route.query,section:i}})},isGroupOpen(i){return this.activeTab==i},settingWidth:i=>"args"in i&&"halfWidth"in i.args?"uip-w-40p":"uip-w-100p"},template:'\n        <div v-if="loading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle "><loading-chart></loading-chart></div>\n        <div v-if="buildingSettings" class="uip-text-muted uip-text-center">{{strings.buildingSettings}}</div>\n\t\t    <div class="uip-flex uip-flex-column uip-h-100p uip-max-h-100p uip-slide-in-right uip-fade-in uip-h-vh uip-position-relative uip-flex-grow" v-if="!missing && !loading">\n          \n          \n          \x3c!-- Block settings header --\x3e\n          <div class="uip-padding-s uip-padding-remove-bottom">\n          \n            <div class="uip-flex uip-gap-xxs uip-flex-center">\n            \n              <span @click="goBack()" class=" uip-border-round hover:uip-background-grey uip-cursor-pointer uip-flex uip-flex-middle uip-flex-center uip-ratio-1-1 uip-flex-middle uip-margin-left--5">\n                <span class="uip-icon uip-text-xl uip-line-height-1 uip-icon-medium uip-text-muted">chevron_left</span>\n              </span>\n            \n              <div class="uip-flex uip-flex-column uip-flex-grow">\n                <input class="uip-text-bold uip-blank-input uip-text-l uip-text-emphasis" v-model="block.name">\n              </div>\n              \n              <div class="uip-flex uip-flex-row ">\n                  <block-actions :block="block" :parentList="[]" :currentIndex="0" :reverse="false" \n                  :disabled="[\'duplicate\',\'settings\']"></block-actions>\n              </div>\n              \n            </div>\n            \n          </div>\n          \x3c!-- End block settings header --\x3e\n          \n          \x3c!-- Settings group --\x3e\n          <div class="uip-padding-s uip-border-bottom uip-flex uip-flex-row uip-gap-xxxs uip-flex-between uip-flex-wrap">\n          \n            <template v-for="item in optionsSections">\n              <button class="uip-button-default uip-flex uip-gap-xxs uip-flex-center uip-padding-left-xs uip-padding-right-xs" :class="item.value == section ? \'uip-button-default uip-text-bold\' : \'uip-no-background\'"\n              @click="section = item.value; pushActiveSection(item.value)">\n                <span class="uip-icon uip-text-m uip-line-height-1">{{item.icon}}</span>\n                <span class="uip-text-s">{{item.label}}</span>\n              </button>\n            </template>\n          </div>\n          \x3c!-- End settings group --\x3e\n          \n          <div class="uip-padding-s uip-overflow-auto uip-scrollbar">\n            \n            \x3c!--BLOCK SETTINGS --\x3e\n            <div class="uip-margin-bottom-m" v-if="section == \'settings\'">\n              <div class=" uip-flex uip-flex-column uip-gap-m uip-padding-xs">\n              \n                <div class="">\n                  <div class="uip-margin-bottom-xs uip-text-bold">{{strings.blockID}}</div>\n                  <uip-tooltip :message="strings.blockUniqueID" :delay="200">\n                    <div class="uip-flex uip-flex-center uip-border uip-border-round uip-padding-xxxs uip-padding-left-xxs uip-padding-right-xxs">\n                      <div class="uip-text-muted uip-text-xs">#</div>\n                      <input class="uip-blank-input uip-text-muted uip-text-xs uip-padding-remove uip-w-100p" style="color:var(--uip-text-color-muted) !important" v-model="block.uid">\n                    </div>\n                  </uip-tooltip>\n                </div>\n              \n                <div class="">\n                  <div class="uip-margin-bottom-xs uip-text-bold">{{strings.tooltip}}</div>\n                  <div class="uip-grid-col-2">\n                    <div class="">\n                      <div class="uip-text-muted uip-text-s">{{strings.tooltipMessage}}</div>\n                      <textarea v-model="block.tooltip.message" class="uip-input uip-input-small uip-text-s uip-padding-top-remove uip-padding-bottom-remove" rows="1" style="resize: none; line-height:2"></textarea>\n                    </div>\n                    <div class="">\n                      <div class="uip-text-muted uip-text-s">{{strings.delay}}</div>\n                      <input type="number" v-model="block.tooltip.delay" class="uip-input uip-input-small uip-text-s uip-remove-steps" placeholder="200">\n                    </div>\n                  </div>\n                </div>\n                <div class="">\n                  <div class="uip-margin-bottom-xs uip-text-bold">{{strings.hiddenOnDevice}}</div>\n                  <hidden-responsive :value="block.responsive" :returnData="function(e){block.responsive = e}"></hidden-responsive>\n                </div>\n                <div v-if="returnSettings.block" class="uip-flex uip-flex-row uip-row-gap-m uip-flex-wrap uip-gap-m">\n                  <template v-for="option in returnSettings.block.options">\n                    <div :class="settingWidth(option)">\n                      <div class="uip-margin-bottom-xs uip-text-bold">\n                         {{option.label}}\n                      </div>\n                      <div class="">\n                         <component :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                      </div>\n                      <div v-if="!componentExists(option.component)" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s">\n                         {{strings.proOption}}\n                      </div>\n                    </div>\n                  </template>\n                </div>\n              </div>\n            </div>\n            \n            \x3c!-- Wrap settings --\x3e\n            <div class="uip-flex uip-flex-column uip-row-gap-xs uip-margin-bottom-l uip-padding-xs" v-if="section == \'container\' && returnSettings.container">\n              <div class="uip-flex uip-flex-row uip-row-gap-m uip-flex-wrap uip-gap-m">\n                <template v-for="option in returnSettings.container.options">\n                  <div v-if="showTitle(option)" :class="settingWidth(option)">\n                    <div class="uip-margin-bottom-xs uip-text-bold">\n                       {{option.label}}\n                    </div>\n                    <div class="">\n                       <component v-if="mode == \'light\'" :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                       <component v-if="mode == \'dark\' && option.dark == true" :is="option.component" :args="option.args" :value="option.darkValue" :returnData="function(data){option.darkValue = data}"></component>\n                    </div>\n                    <div v-if="!componentExists(option.component)" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s">\n                       {{strings.proOption}}\n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n            \n            \n            \x3c!--Block styles --\x3e\n            <div class="uip-flex uip-flex-column uip-row-gap-xs uip-margin-bottom-l" v-if="section == \'style\'">\n            \n              <toggle-switch :options="switchOptions" :activeValue="mode" :returnValue="function(data){ mode = data}"></toggle-switch>\n            \n              <template v-for="(group, index) in returnSettings">\n                <accordion v-if="checkIfEmpty(group) && group.name != \'block\' && group.name != \'advanced\' && group.name != \'container\'" @click="pushActiveTab(index)" :startOpen="isGroupOpen(index)">\n                  <template v-slot:title>\n                    <div class="uip-flex uip-gap-xxs">\n                      <span v-if="group.icon" class="uip-icon uip-icon-medium uip-text-l">{{group.icon}}</span>\n                      <div class="uip-flex uip-flex-column uip-row-gap-xxxs ">\n                        <span class="">{{group.label}}</span>\n                        <span v-if="group.class" class="uip-text-muted uip-text-xs">{{group.class}}</span>\n                      </div>\n                    </div>\n                  </template>\n                  \x3c!--CONTENT--\x3e\n                  <template v-slot:content>\n                    <div class="uip-flex uip-flex-column uip-row-gap-xs">\n                      <template v-for="option in group.options">\n                        <div class="uip-padding-xs" v-if="showTitle(option)">\n                          <div class="uip-margin-bottom-xs uip-text-bold">\n                             {{option.label}}\n                          </div>\n                          <div class="">\n                             <component v-if="mode == \'light\'" :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                             <component v-if="mode == \'dark\' && option.dark == true" :is="option.component" :args="option.args" :value="option.darkValue" :returnData="function(data){option.darkValue = data}"></component>\n                          </div>\n                          <div v-if="!componentExists(option.component)" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s">\n                             {{strings.proOption}}\n                          </div>\n                        </div>\n                      </template>\n                    </div>\n                    \x3c!--end of options --\x3e\n                  </template>\n                </accordion>\n              </template>\n            </div>\n            \n            \n            \x3c!--Advanced settings --\x3e\n            <div class="uip-flex uip-flex-column uip-row-gap-xs uip-margin-bottom-l" v-if="section == \'advanced\' && returnSettings.advanced">\n              <div class="uip-flex uip-flex-column uip-row-gap-xs">\n                <template v-for="option in returnSettings.advanced.options">\n                  <div class="uip-padding-xs" v-if="showTitle(option)">\n                    <div class="uip-margin-bottom-xs uip-text-bold">\n                       {{option.label}}\n                    </div>\n                    <div class="">\n                       <component v-if="mode == \'light\'" :is="option.component" :value="option.value" :args="option.args" :returnData="function(data){option.value = data}"></component>\n                       <component v-if="mode == \'dark\' && option.dark == true" :is="option.component" :args="option.args" :value="option.darkValue" :returnData="function(data){option.darkValue = data}"></component>\n                    </div>\n                    <div v-if="!componentExists(option.component)" class="uip-padding-xxs uip-border-round uip-background-green-wash uip-text-s">\n                       {{strings.proOption}}\n                    </div>\n                  </div>\n                </template>\n              </div>\n            </div>\n            \n            \n          </div>\n\t\t    </div>\n        <div v-if="missing" class="uip-padding-s">\n          <div class="uip-background-orange-wash uip-padding-xs uip-border-round  uip-margin-bottom-s">{{strings.missingMessage}}</div>\n          <button class="uip-button-default" @click="goBack">{{strings.goBack}}</button>\n        </div>'}};