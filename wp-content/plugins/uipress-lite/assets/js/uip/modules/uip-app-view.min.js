export function moduleData(){return{props:{},inject:["uipData","router","uipress"],data:function(){return{template:{display:"prod",settings:this.formatTemplate(uipUserTemplate.settings),content:this.formatTemplate(uipUserTemplate.content),globalSettings:this.formatTemplate(uipUserTemplate.settings),updated:this.formatTemplate(uipUserTemplate.updated),id:uipUserTemplate.id,styles:uipUserStyles},loading:!0,updateAvailable:!1}},provide(){return{uiTemplate:this.template}},mounted:function(){let t=this;setTimeout(function(){t.loading=!1},400),"ui-template"==this.template.globalSettings.type&&setInterval(function(){t.checkForUpdates()},6e4)},computed:{returnTemplateJS(){if(void 0!==this.template.globalSettings.options)return"advanced"in this.template.globalSettings.options&&"js"in this.template.globalSettings.options.advanced?this.template.globalSettings.options.advanced.js:void 0},returnTemplateCSS(){if(void 0!==this.template.globalSettings.options)return"advanced"in this.template.globalSettings.options&&"css"in this.template.globalSettings.options.advanced?this.template.globalSettings.options.advanced.css:void 0}},methods:{checkForUpdates(){let t=this;if(this.updateAvailable)return;let e=new FormData;e.append("action","uip_check_for_template_updates"),e.append("security",uip_ajax.security),e.append("template_id",t.template.id),t.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{if(e.error,e.success&&e.updated>t.template.updated)return this.updateAvailable=!0,void t.updateNotification()})},updateNotification(){let t=`\n        <div class="uip-margin-bottom-s">${__("Changes have been made to your current app. Refresh the page to update","uipress-lite")}</div>\n        <button class="uip-button-primary" type='button' onclick="location.reload()">${__("Update","uipress-lite")}</button>\n        `;this.uipress.notify(__("Update available","uipress-lite"),t,"",!1)},formatTemplate(t){return this.uipress.uipParsJson(JSON.stringify(t))},componentExists(t){return!!this.$root._.appContext.components[t]}},template:'\n    <component is="style" scoped >\n    .uip-user-frame:not(.uip-app-frame){\n    <template v-for="(item, index) in template.styles">\n      <template v-if="item.value">{{index}}:{{item.value}};</template>\n    </template>\n    }\n    [data-theme="dark"] :not(.uip-app-frame) *{\n    <template v-for="(item, index) in template.styles">\n      <template v-if="item.darkValue"> {{index}}:{{item.darkValue}};</template>\n    </template>\n    }\n    {{returnTemplateCSS}}\n    </component>\n    <component is="script" scoped>\n      {{returnTemplateJS}}\n    </component>\n    \n    <uip-content-area :content="template.content" \n    :returnData="function(data) {template.content = data} " v-if="!loading">\n    </uip-content-area>\n    \n    <div v-if="loading" class="uip-flex uip-flex-center uip-flex-middle uip-w-100p uip-h-100p"><loading-chart></loading-chart></div>\n    \n    \x3c!--Import plugins --\x3e\n    <template v-for="plugin in uipData.plugins">\n      <component v-if="componentExists(plugin.component) && plugin.loadInApp"\n      :is="plugin.component">\n      </component>\n    </template>\n    \x3c!-- end plugin import --\x3e'}};